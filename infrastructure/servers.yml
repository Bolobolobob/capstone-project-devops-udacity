Description: >
    Charles Gery / Udacity
    Deploy a High-Availability Web App using CloudFormation
    This template deploys the servers part of the project (LoadBalancer, EC2 instances...)

Parameters:

    EnvName:
        Description: Environment Name
        Type: String
        Default: UdacityProject

    VPCCIDR:
        Description: IP Range of the VPC
        Type: String
        Default: 10.0.0.0/16
    
    LBIngressCIDR:
        Description: IP range of the SecurityGroupIngress of the LB
        Type: String
        Default: 0.0.0.0/0

    LBEgressCIDR:
        Description: IP range of the SecurityGroupEgress of the LB
        Type: String
        Default: 0.0.0.0/0
    
    NodesIngressCIDR:
        Description: IP range of the SecurityGroupIngress of the web servers
        Type: String
        Default: 0.0.0.0/0

    NodesEgressCIDR:
        Description: IP range of the SecurityGroupEgress of the web servers
        Type: String
        Default: 0.0.0.0/0

    LCInstanceType:
        Description: LaunchConfigInstanceType
        Type: String
        Default: t3.medium
    
    LCImageId:
        Description: Launch config image id
        Type: String
        Default: ami-0f53c7a1236d06961
    
    LCKeyName:
        Description: Launch config key name
        Type: String
        Default: nodes-udacity-project2

    WorkerNodeBootstrapArguments:
        Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
        Default: "--kubelet-extra-args --node-labels=nodetype=worker"
        Type: String
    
Resources:

    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow HTTP to LB
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvName}-VPCID"
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: !Ref LBIngressCIDR
            SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: !Ref LBEgressCIDR

    NodesSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: HTTP to host, SSH from local (for connection from bastion)
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvName}-VPCID"
            SecurityGroupIngress:
            - IpProtocol: '-1'
              FromPort: 0
              ToPort: 65535
              CidrIp: !Ref NodesIngressCIDR
              Description: Allow traffic from all nodes
            - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              CidrIp: !Ref VPCCIDR
              Description: Allow traffic from bastion
            - IpProtocol: tcp
              FromPort: 1025
              ToPort: 65535
              Description: Allow traffic from control plane
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: 443
              ToPort: 443
              Description: Allow traffic from control plane
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 0
              ToPort: 65535
              CidrIp: !Ref NodesEgressCIDR
            - IpProtocol: tcp
              FromPort: 1025
              ToPort: 65535
              Description: Allow traffic to control plane
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: 443
              ToPort: 443
              Description: Allow traffic to control plane
              CidrIp: 0.0.0.0/0
    
    LaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            AssociatePublicIpAddress: false
            IamInstanceProfile: arn:aws:iam::244468422315:role/EKSNodeInstanceRole
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    set -o xtrace
                    /etc/eks/bootstrap.sh ${EnvName}-CLUSTER ${WorkerNodeBootstrapArguments}
                    /opt/aws/bin/cfn-signal --exit-code $? \
                            --stack  ${AWS::StackName} \
                            --resource NodeGroup  \
                            --region ${AWS::Region}
            ImageId: ami-0f53c7a1236d06961
            KeyName: !Ref LCKeyName
            SecurityGroups:
            - Ref: NodesSecGroup
            InstanceType: !Ref LCInstanceType
            BlockDeviceMappings:
            - DeviceName: "/dev/xvda"
              Ebs:
                VolumeSize: '20'
                VolumeType: gp2
                DeleteOnTermination: true
    
    NodesASGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
            - Fn::ImportValue: 
                !Sub "${EnvName}-PRIV-NETS"
            LaunchConfigurationName:
                Ref: LaunchConfig
            MinSize: '4'
            MaxSize: '4'
            TargetGroupARNs:
            - Ref: WebAppTargetGroup
            HealthCheckGracePeriod: 60
            Tags:
            - Key: 
                Fn::Sub:
                - 'kubernetes.io/cluster/${EKSCluster}'
                - EKSCluster: 
                    Fn::ImportValue: !Sub "${EnvName}-CLUSTER"
              Value: owned
              PropagateAtLaunch: true
    
    LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
            - Fn::ImportValue: !Sub "${EnvName}-PUB1-SN"
            - Fn::ImportValue: !Sub "${EnvName}-PUB2-SN"
            SecurityGroups:
            - Ref: LBSecGroup
    
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            - Type: forward
              TargetGroupArn:
                Ref: WebAppTargetGroup
            LoadBalancerArn:
                Ref: LoadBalancer
            Port: '80'
            Protocol: HTTP
    
    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
            - Type: forward
              TargetGroupArn: !Ref 'WebAppTargetGroup'
            Conditions:
            - Field: path-pattern
              Values: [/]
            ListenerArn: !Ref 'Listener'
            Priority: 1
    
    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckEnabled: true
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: 
                Fn::ImportValue:
                    Fn::Sub: "${EnvName}-VPCID"

Outputs:

    DNSName:
        Description: The DNS name of the load balancer
        Value: !Sub http://${LoadBalancer.DNSName}
        Export:
            Name: !Sub ${EnvName}-DNSNAME

    

